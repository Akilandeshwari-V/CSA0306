#include <stdio.h>

#define V 5
#define E 7

typedef struct {
    int src, dest, weight;
} Edge;

int parent[V];

int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void unionSet(int x, int y) {
    int xset = find(x);
    int yset = find(y);
    parent[yset] = xset;
}

void kruskalMST(Edge edges[]) {
    int e = 0, i = 0;
    Edge result[V-1];

    for (int v = 0; v < V; v++)
        parent[v] = v;

    // Sort edges by weight (simple bubble sort)
    for (int i = 0; i < E-1; i++) {
        for (int j = 0; j < E-i-1; j++) {
            if (edges[j].weight > edges[j+1].weight) {
                Edge temp = edges[j];
                edges[j] = edges[j+1];
                edges[j+1] = temp;
            }
        }
    }

    while (e < V - 1 && i < E) {
        Edge next = edges[i++];
        int x = find(next.src);
        int y = find(next.dest);
        if (x != y) {
            result[e++] = next;
            unionSet(x, y);
        }
    }

    for (i = 0; i < e; i++)
        printf("%d - %d \t%d\n", result[i].src, result[i].dest, result[i].weight);
}

int main() {
    Edge edges[E] = {
        {0, 1, 2},
        {0, 3, 6},
        {1, 2, 3},
        {1, 3, 8},
        {1, 4, 5},
        {2, 4, 7},
        {3, 4, 9}
    };

    kruskalMST(edges);
    return 0;
}
