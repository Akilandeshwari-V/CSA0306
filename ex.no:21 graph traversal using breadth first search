#include <stdio.h>

#define MAX 100

int queue[MAX], front = -1, rear = -1;

void enqueue(int x) {
    if (rear == MAX - 1) return; // queue full
    if (front == -1) front = 0;
    queue[++rear] = x;
}

int dequeue() {
    if (front == -1 || front > rear) return -1; // queue empty
    return queue[front++];
}

int isEmpty() {
    return (front == -1 || front > rear);
}

void BFS(int graph[][MAX], int n, int start) {
    int visited[MAX] = {0};
    enqueue(start);
    visited[start] = 1;

    while (!isEmpty()) {
        int current = dequeue();
        printf("%d ", current);

        for (int i = 0; i < n; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int n = 6; // number of vertices
    int graph[MAX][MAX] = {0};

    // Example graph edges (undirected)
    graph[0][1] = 1; graph[1][0] = 1;
    graph[0][2] = 1; graph[2][0] = 1;
    graph[1][3] = 1; graph[3][1] = 1;
    graph[1][4] = 1; graph[4][1] = 1;
    graph[2][4] = 1; graph[4][2] = 1;
    graph[3][5] = 1; graph[5][3] = 1;
    graph[4][5] = 1; graph[5][4] = 1;

    printf("BFS traversal starting from node 0:\n");
    BFS(graph, n, 0);

    return 0;
}
