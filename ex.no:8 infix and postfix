#include <stdio.h>

#define SIZE 100

char stack[SIZE];
int top = -1;

void push(char c) {
    if (top < SIZE - 1) {
        top++;
        stack[top] = c;
    }
}

char pop() {
    if (top >= 0) {
        char temp = stack[top];
        top--;
        return temp;
    }
    return '\0';
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

int isOperand(char ch) {
    // Returns 1 if ch is a letter or digit
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9');
}

void infixToPostfix(char infix[]) {
    int i = 0;
    char ch;
    
    while (infix[i] != '\0') {
        ch = infix[i];

        if (isOperand(ch)) {
            printf("%c", ch);  // Directly print operands
        }
        else if (ch == '(') {
            push(ch);
        }
        else if (ch == ')') {
            while (top != -1 && stack[top] != '(') {
                printf("%c", pop());
            }
            pop(); // Remove '('
        }
        else {  // Operator
            while (top != -1 && precedence(stack[top]) >= precedence(ch)) {
                printf("%c", pop());
            }
            push(ch);
        }

        i++;
    }

    while (top != -1) {
        printf("%c", pop());
    }
}

int main() {
    char expr[SIZE];

    printf("Enter infix expression (e.g., a+b*c): ");
    scanf("%s", expr);

    printf("Postfix: ");
    infixToPostfix(expr);

    return 0;
}
